// 그리디 문제 대표문제

///
//그리디 알고리즘은 현재 상황에서 가장 좋은 결과를 선택해나가는 방식입니다. 하지만 이 가장 좋은 결과는 최종적인 결과 도출에 대한 최적해를 보장해주는 것은 아닙니다!

//영상풀이
// 최대한 많은 회의 => 갯수가 중요
// 그리디니까 먼저 정렬하고 순서대로 선택
// 회의가 일찍 끝나는게 우선 그래야 다른 걸 많이 할 수 있는 기회가 생김
// => 끝나는 타임으로 정렬
// 시작시간으로 하면 하나가 시간이 길어지면 다른거못함
// 회의시간이 짧은걸 우선순위로무면 3 1 3 중에 중간이 겹쳐서 못하는 경운데 1이 우선될수도있음.
// 끝나는 시간 순으로 정렬하고 이 때 끝나는 타임이 같으면 시작시간으로 정렬
// 앞의 끝나는 시간이 뒤의 시간보다 작거나 같음 가능
// 첫번짼 무조건함

const solution = (meeting) => {
  let answer = 0;
  meeting.sort((a, b) => {
    if (a[1] === b[1]) return a[0] - b[0];
    else return a[1] - b[1];
  });
  let et = 0;
  for (let x of meeting) {
    if (x[0] >= et) {
      answer++;
      et = x[1];
    }
  }
  return answer;
};

let arr = [
  [1, 4],
  [2, 3],
  [3, 5],
  [4, 6],
  [5, 7],
];
console.log(solution(arr));
